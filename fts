#!/usr/bin/env python3

import sys
import argparse
import requests
import json
import hashlib



class TimestampServer:
  def __init__(self, api_url):
    self.api_url = api_url

  def _api_url(self, path):
    return self.api_url + path

  def _api_timestamps_new(self):
    return self.api_url + '/timestamps/new'

  def _api_timestamps(self):
    return self.api_url + '/timestamps'

  def prepare_submission(self):
    r = requests.get(self._api_timestamps_new())
    prepare_data = json.loads(r.text)
    return prepare_data['master_id'], prepare_data['salt']

  def submit_timestamp(self, hash, master_id):
    r = requests.post(self._api_timestamps())
    print(r.text)



class TimestampRequest:
  def __init__(self, file):
    self.encoded_data = file.read().encode()

  def submit_to(self, server):
    master_id, salt = server.prepare_submission()
    hasher = hashlib.sha512()
    hasher.update(salt.encode())
    hasher.update(self.encoded_data)
    hash = hasher.hexdigest()
    server.submit_timestamp(hash, master_id)



def do_submit(args):
  servers = [TimestampServer('http://fts-ruby.herokuapp.com')]
  request = TimestampRequest(args.file)
  for server in servers:
    request.submit_to(server)






# setup command line parser
parser = argparse.ArgumentParser(prog='fts')
cmdparsers = parser.add_subparsers()

# 'submit' command parser
parser_submit = cmdparsers.add_parser('submit')
parser_submit.add_argument('file', type=argparse.FileType('r'))
parser_submit.set_defaults(func=do_submit)


# do it live!
if __name__ == "__main__":
  args = parser.parse_args()
  sys.exit( args.func(args) )
